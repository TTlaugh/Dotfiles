#!/usr/bin/env bash

# Description: Arch linux cleanup script.

set_colors() {
    if [ -t 1 ]; then
        RED=$(printf '\033[31m')
        GREEN=$(printf '\033[32m')
        YELLOW=$(printf '\033[33m')
        BLUE=$(printf '\033[34m')
        BOLD=$(printf '\033[1m')
        RESET=$(printf '\033[m')
    else
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        BOLD=""
        RESET=""
    fi
}

check_root() {
    if [[ "$(id -u)" != "0" ]]; then
        printf "%s%sYou need to run this as root script!%s\n" "$BOLD" "$RED" "$RESET"
        sudo true
    fi
}

print_option() {
    printf "%s  [%s0%s] Check!%s\n"                                  "$BLUE" "$RESET" "$BLUE" "$RESET"
    printf "%s  [%s1%s] Remove package cache.%s\n"                   "$BLUE" "$RESET" "$BLUE" "$RESET"
    printf "%s  [%s2%s] Remove unused packages.%s\n"                 "$BLUE" "$RESET" "$BLUE" "$RESET"
    printf "%s  [%s3%s] Clean the cache in your home directory.%s\n" "$BLUE" "$RESET" "$BLUE" "$RESET"
    printf "%s  [%s4%s] Remove old config files.%s\n"                "$BLUE" "$RESET" "$BLUE" "$RESET"
    printf "%s  [%s5%s] Clean Systemd journal.%s\n"                  "$BLUE" "$RESET" "$BLUE" "$RESET"
    printf "%s  [%s6%s] Quick clean.%s\n"                            "$BLUE" "$RESET" "$BLUE" "$RESET"
    echo
    printf "%s  [x] Exit.%s\n"                                       "$RED"  "$RESET"
    printf "%s%sEnter your option (Default 0):%s "                   "$BOLD" "$GREEN" "$RESET"
}

check() {
    printf "%sChecking ...... %s\n" "$RED" "$RESET"
    paccachesize=$(du -sh /var/cache/pacman/pkg/ | awk '{print $1}')
    homecachesize=$(du -sh "${HOME}"/.cache/ | awk '{print $1}')
    homecachenum=$(find "${HOME}"/.cache/* -type f | wc -l)
    journalsize1=$(du -sh /var/log/journal/ | awk '{print $1}')
    journalsize2=$(du -sh /run/log/journal/ | awk '{print $1}')
    configfiles="$(find "${HOME}"/.config/* -maxdepth 0 | wc -l) items"
    unpackage="$(pacman -Qtdq | wc -l) packages"
    printf "%sDone!%s\n" "$GREEN" "$RESET"
    printf "%s==> Package cache    :  %s/var/cache/pacman/pkg/   :%s%s$paccachesize\n%s"                    "$BLUE"  "$YELLOW""$BOLD" "$GREEN""$RESET"
    printf "%s==> Home cache       :  %s${HOME}/.cache/       :%s%s$homecachesize ($homecachenum files)\n%s""$BLUE"  "$YELLOW""$BOLD" "$GREEN""$RESET"
    printf "%s==> Systemd journal  :  %s/var/log/journal/        :%s%s$journalsize1\n%s"                    "$BLUE"  "$YELLOW""$BOLD" "$GREEN""$RESET"
    printf "                        %s/run/log/journal/        :%s%s$journalsize2\n%s"                      "$YELLOW""$BOLD"  "$GREEN""$RESET"
    printf "%s==> All config files :  %s%s$configfiles\n%s"                                                 "$BLUE"  "$BOLD"  "$GREEN""$RESET"
    printf "%s==> Unused packages  :  %s%s$unpackage\n%s"                                                   "$BLUE"  "$BOLD"  "$GREEN""$RESET"
    echo
    printf "%sEnter to go back.%s" "$BOLD" "$RESET"
    read -r
}

remove_pkgs_cache() {
    printf "%s  [0] Go back <--%s\n"                                 "$BLUE" "$RESET"
    printf "%s  [1] Remove NOT installed packages from cache%s\n"    "$BLUE" "$RESET"
    printf "%s  [2] Remove ALL files from cache%s\n"                 "$BLUE" "$RESET"
    printf "%s%sEnter your option (Default 1):%s " "$BOLD" "$GREEN" "$RESET"
    read -r chosen1
    case $chosen1 in
        "") sudo pacman -Sc;;
        1)  sudo pacman -Sc;;
        2)  sudo pacman -Scc;;
        0)  return;;
        *)  return;;
    esac
    printf "\n%sDone! Enter to go back.%s" "$BOLD" "$RESET"
    read -r
}

remove_unused_pkgs() {
    unusedpackages="$(pacman -Qtdq)"
    if [[ -z "$unusedpackages" ]]; then
        printf "%sNo unused packages to remove. Enter to continue.%s" "$BOLD" "$RESET"
    else
        echo "$unusedpackages" | sudo pacman -Rns - && printf "\n%sDone! Enter to go back.%s" "$BOLD" "$RESET"
    fi
    read -r
}

findcache30() {
    clear
    printf "%s%sFinding ......%s\n" "$BOLD" "$RED" "$RESET"
    cache30=$(find "$HOME"/.cache/* -maxdepth 1 -type f -atime +30)
    case $cache30 in
        "") echo "No old caches found.";;
        *)  echo "$cache30";;
    esac
}
findcache() {
    printf "%sEnter the uninstalled package name:%s " "$YELLOW" "$RESET"
    read -r upacname
    clear
    printf "%s%sFinding ......%s\n" "$BOLD" "$RED" "$RESET"
    upacfind=$(find "${HOME}"/.cache/* -maxdepth 1 | grep -i -w "$upacname")
    case $upacfind in
        "") printf "%s0 matches found.%s\n" "$GREEN" "$RESET";;
        *)  printf "$upacfind\n%s$(echo "$upacfind" | wc -l) matches found.%s\n" "$GREEN" "$RESET";;
    esac
}
remove_cache_files() {
    printf "     %s%s!!! So dangerous to remove cache file!!!%s \n" "$BOLD" "$RED" "$RESET"
    echo " ==> You should find manually and only delete files that are really not needed! "
    echo " ==> You can manual delete cache files of uninstalled app in ${HOME}/.cache/*     "
    echo
    printf "%sThere are some things you can do:%s\n"                         "$YELLOW" "$RESET"
    printf "%s  [0] Go back <--%s\n"                                         "$BLUE" "$RESET"
    printf "%s  [1] Find old cache files in ~/.cache/ (after 30 days)%s\n"   "$BLUE" "$RESET"
    printf "%s  [2] Find uninstalled app caches.%s\n"                        "$BLUE" "$RESET"
    echo
    printf "%s%sEnter your option (Default 0):%s "                           "$BOLD" "$GREEN" "$RESET"
    read -r chosen3
    case $chosen3 in
        1) findcache30;;
        2) findcache;;
        *) return;;
    esac
    printf "\n%sEnter to continue.%s" "$BOLD" "$RESET"
    read -r
}

findconfig() {
    printf "%sEnter the uninstalled package name:%s " "$YELLOW" "$RESET"
    read -r upacnamecfg
    clear
    printf "%s%sFinding ......%s\n" "$BOLD" "$RED" "$RESET"
    upacnamecfg=$(find "${HOME}"/.config/* "${HOME}"/.local/share/* -maxdepth 1 | grep -w "$upacnamecfg")
    case $upacnamecfg in
        "") printf "%s0 matches found.%s\n" "$GREEN" "$RESET";;
        *)  printf "$upacnamecfg\n%s$(echo "$upacnamecfg" | wc -l) matches found.%s\n" "$GREEN" "$RESET";;
    esac
}
remove_old_configs() {
    echo "**********************************************************************************************"
    echo "*                                                                                            *"
    echo "* ==> Can't remove old config files automatically! You must find and remove them manually.   *"
    echo "*                                                                                            *"
    echo "* ==> You can find them at    ~/.config/                                                     *"
    echo "*                       or    ~/.local/share/                                                *"
    echo "*                                                                                            *"
    echo "**********************************************************************************************"
    echo
    read -r -p "Do you want to find old config files? [Y/n] " oldcfg
    if [[ "$oldcfg" = "y" ]] || [[ "$oldcfg" = "Y" ]] || [[ "$oldcfg" = "yes" ]] || [[ "$oldcfg" = "Yes" ]] || [[ -z "$oldcfg" ]]; then
        findconfig
    fi
    printf "\n%sDone! Enter to go back.%s" "$BOLD" "$RESET"
    read -r
}

remove_journal() {
    journalctl -p 3 -b
    printf "\n%sIf you find some errors, %sgoogle%s %sthem before deleting!%s\n" "$BOLD" "$GREEN" "$RESET" "$BOLD" "$RESET"
    read -r -p "Continue to delete? [Y/n] " djournal
    if [[ "$djournal" = "y" ]] || [[ "$djournal" = "Y" ]] || [[ "$djournal" = "yes" ]] || [[ "$djournal" = "Yes" ]] || [[ -z "$djournal" ]]; then
        sudo journalctl --vacuum-size=50M
    fi
    printf "\n%sDone! Enter to go back.%s" "$BOLD" "$RESET"
    read -r
}

quick_remove() {
    printf "%s%sRemoving packages cache ......%s\n" "$BOLD" "$RED" "$RESET"
    sudo pacman -Sc
    printf "%s%sDone! Enter to continue.%s" "$BOLD" "$GREEN" "$RESET"
    read -r

    unusedpackages="$(pacman -Qtdq)"
    if [[ "$unusedpackages" = "" ]]; then
        printf "\n%s%s!!! No unused packages to remove.\n%sEnter to continue.%s" "$BOLD" "$RED" "$GREEN" "$RESET"
    else
        printf "\n%s%sRemoving unused packages ......%s\n" "$BOLD" "$RED" "$RESET"
        echo "$unusedpackages" | sudo pacman -Rns -
        printf "%s%sDone! Enter to continue.%s" "$BOLD" "$GREEN" "$RESET"
    fi
    read -r

    printf "\n%s%sCheck Systemd journal ......%s\n" "$BOLD" "$RED" "$RESET"
    journalctl -p 3 -b
    printf "\n%sIf you find some errors, %sgoogle%s %sthem before deleting!%s\n" "$BOLD" "$GREEN" "$RESET" "$BOLD" "$RESET"
    read -r -p "Continue to delete? [Y/n] " djournal
    if [[ "$djournal" = "y" ]] || [[ "$djournal" = "Y" ]] || [[ "$djournal" = "yes" ]] || [[ "$djournal" = "Yes" ]] || [[ -z "$djournal" ]]; then
        sudo journalctl --vacuum-size=50M
    fi

    printf "\n%sDone! Enter to go back.%s" "$BOLD" "$RESET"
    read -r
}

main() {
    set_colors
    check_root
    while :
    do
        print_option
        read -r chosen
        case "$chosen" in
            "") check ;;
            0)  check ;;
            1)  remove_pkgs_cache ;;
            2)  remove_unused_pkgs ;;
            3)  remove_cache_files ;;
            4)  remove_old_configs ;;
            5)  remove_journal ;;
            6)  quick_remove ;;
            *)  exit 0 ;;
        esac
    done
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
